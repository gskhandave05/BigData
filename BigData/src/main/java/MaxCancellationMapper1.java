
import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Reporter;

/**
 * @author gauravkhandave
 *
 *	This Mapper uses unique carrier as a key and source,destination with cancellation count as value.
 *	The Mapper uses file generated by Reducer as a input residing in /temp folder.
 */
public class MaxCancellationMapper1 extends MapReduceBase implements Mapper<LongWritable, Text, Text, Text> {

	@Override
	public void map(LongWritable key, Text value, OutputCollector<Text, Text> output, Reporter reporter)
			throws IOException {
		StringTokenizer tokens = new StringTokenizer(value.toString());
		String temp = "";
		String mapKey="";
		String srcDest = "";
		while(tokens.hasMoreTokens()){
			String token = tokens.nextToken();
			if(token.equals("(1)")){
				temp=token;
			}
			if(token.matches("[a-zA-Z]{2}$")){
				mapKey = token;
			}
			if(token.matches("[a-zA-Z]+(,[a-zA-Z]+)")){
				srcDest = token;
			}
			if(token.matches("[0-9]+")){
				output.collect(new Text(mapKey + " "+ temp), new Text(" " + srcDest + " " + token));
			}
		}

		
	}

}
